Это должно вот так выглядить

import React, { useState } from 'react';

const Notification = ({ message }) => {
  return <div className="notification">{message}</div>;
};

const App = () => {
  const [notification, setNotification] = useState(null);

  // Функция для отображения уведомления
  function showNotification(message) {
    setNotification(message);

    // Удаляем уведомление через 2 секунды
    setTimeout(() => {
      setNotification(null);
    }, 2000);
  }

  // Пример обработчика события, который вызывает уведомление
  const handleButtonClick = () => {
    showNotification('Успешно выполнено!');
  };

  return (
    <div>
      <button onClick={handleButtonClick}>Показать уведомление</button>
      {notification && <Notification message={notification} />}
      {/* Остальной код */}
    </div>
  );
}

export default App;


Выбор фитнесс-клуба✅
Ваш input элемент должен выглядеть примерно так:
<input type="text" value={inputValue} onChange={handleChange} onKeyDown={handleKeyDown} />

Здесь inputValue - это состояние, которое вы создаете с помощью хука useState для отслеживания текущего ввода пользователя. handleChange и handleKeyDown - это функции, которые вы определите для обработки изменений ввода и нажатий клавиш соответственно.

Функция handleChange может выглядеть так:
function handleChange(event) {
  setInputValue(event.target.value);
}
Эта функция просто обновляет inputValue каждый раз, когда пользователь вводит что-то в поле ввода.

Функция handleKeyDown может выглядеть так:
function handleKeyDown(event) {
  if (event.key === "Enter" || event.key === "Tab") {
    // Пользователь выбрал клуб, переходим к следующей форме
    // Здесь вы можете добавить логику для перехода к следующей форме
  }
}

Эта функция проверяет, нажал ли пользователь клавишу Enter или Tab, и если да, то переходит к следующей форме. Здесь вы можете добавить свою логику для перехода к следующей форме.


Вторая форма✅
Во-первых, вы можете создать отдельный компонент для этой формы. Этот компонент может принимать пропсы из родительского компонента, которые содержат информацию, выбранную пользователем на предыдущем шаге (например, выбранный фитнесс-клуб).
Ваш компонент формы может выглядеть примерно так:

function ContactForm({ selectedClub }) {
  // Здесь вы можете использовать хуки состояния для отслеживания ввода пользователя
  const [name, setName] = React.useState("");
  const [surname, setSurname] = React.useState("");
  const [phone, setPhone] = React.useState("");
  const [date, setDate] = React.useState("");
  const [time, setTime] = React.useState("");
  const [trainer, setTrainer] = React.useState("");
  
  // Функция для обработки отправки формы
  function handleSubmit(event) {
    event.preventDefault();
    
    // Здесь вы можете добавить логику для отправки данных в базу данных и в Telegram
    // ...
  }
  
  return (
    <form onSubmit={handleSubmit}>
      {/* Здесь вы можете добавить поля ввода для каждого из значений состояния */}
      {/* Например: */}
      <input type="text" value={name} onChange={event => setName(event.target.value)} />
      {/* И так далее для остальных значений состояния */}
      
      <input type="submit" value="Отправить" />
    </form>
  );
}


В этом компоненте мы используем хуки состояния для отслеживания каждого значения, которое пользователь вводит в форму. Когда форма отправляется, мы предотвращаем стандартное поведение отправки формы и вместо этого выполняем нашу собственную функцию handleSubmit, которая может отправить данные в базу данных и в Telegram.